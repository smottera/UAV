---reserved words:
break, default, func, 	interface, select, case, defer, Go, map, Struct,
chan, else, Goto, package, Switch,const,fallthrough, if, range, Type,continue, for, import, 	return 	Var

fmt.Println("Hello, World!")

var variable_list optional_data_type;
var age int;
var  i, j, k int;
var  c, ch byte;
var  f, salary float32;
d =  42;
fruit = apples + oranges;
/* ... comments ... */

---------------------------------------------------------------------------
Boolean types
They are boolean types and consists of the two predefined constants: (a) true (b) false

Numeric types
They are again arithmetic types and they represents a) integer types or b) floating point values throughout the program.	

String types
A string type represents the set of string values. Its value is a sequence of bytes. Strings are immutable types that is once created, it is not possible to change the contents of a string. The predeclared string type is string.
 	

Derived types
They include (a) Pointer types, (b) Array types, (c) Structure types, (d) Union types and (e) Function types f) Slice types g) Interface types h) Map types i) Channel Types
----------------------------------------------------------------------------

Rune:
Rune stands for letter. ("Runes" are the letters in a set of related alphabets known as runic alphabets, which were used to write various Germanic languages before the adoption of the Latin alphabet. [Wikipedia]).
If a variable has type rune in Go you know it is intended to hold a unicode code point. (rune is shorter and clearer than codepoint). But it is technical a int32, i.e. its representation in memory is that of an int32.

----------------------------------------------------------------------------
Inside a function, the := short assignment statement can be used in place of a var declaration with implicit type.

Outside a function, every statement begins with a keyword (var, func, and so on) and so the := construct is not available. 


Defer

A defer statement defers the execution of a function until the surrounding function returns.

The deferred call's arguments are evaluated immediately, but the function call is not executed until the surrounding function returns.
