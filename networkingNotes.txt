||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
------------------------------------- Networking: A top-down approach ----------------------------------------
||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

	*look at wireshark labs and, Q/Answers section

	*A packet switch takes a packet arriving on one of its incoming communication links and forwards that
	packet on one of its outgoing communication links.

	*The Internet, and computer networks in general, make extensive use of protocols. Different protocols
	are used to accomplish different communication tasks. As you read through this book, you will learn that
	some protocols are simple and straightforward, while others are complex and intellectually deep.
	Mastering the field of computer networking is equivalent to understanding the what, why, and how of
	networking protocols.

	*A protocol layer can be implemented in software, in hardware, or in a combination of the two.
	Application-layer protocols—such as HTTP and SMTP—are almost always implemented in software in
	the end systems; so are transport-layer protocols. Because the physical layer and data link layers are
	responsible for handling communication over a specific link, they are typically implemented in a network
	interface card (for example, Ethernet or WiFi interface cards) associated with a given link. The network
	layer is often a mixed implementation of hardware and software.

--------------------------------------------------------------------------------------------------------------
--------------------------------------------  APPLICATION LAYER ----------------------------------------------
--------------------------------------------------------------------------------------------------------------
	
	socket programming
	VOIP
	sever-client model 
	P2P distribution
	email
	Video streaming/content distribution
	socket programming

--------------------------------------------------------------------------------------------------------------
--------------------------------------------  TRANSPORT LAYER ------------------------------------------------
--------------------------------------------------------------------------------------------------------------

	1. Residing between the application and network layers, the transport layer is a central piece of the layered
	network architecture, that has a critical role of providing communication services directly to the
	application processes running on different hosts. As usual, particular emphasis will be given to Internet protocols, in
	particular the TCP and UDP transport-layer protocols.

	2. We’ll then return to principles and confront one of the most fundamental problems in computer
	networking—how two entities can communicate reliably over a medium that may lose and corrupt data. We’ll next move on to a second fundamentally important problem in networking—controlling the
	transmission rate of transport-layer entities in order to avoid, or recover from, congestion within the
	network.

	3. A transport-layer protocol provides for logical communication between application processes running
	on different hosts. Transport-layer protocols are implemented in the end systems but not in
	network routers. On the sending side, the transport layer converts the application-layer messages it
	receives from a sending application process into transport-layer packets, known as transport-layer
	segments in Internet terminology. This is done by (possibly) breaking the application messages into
	smaller chunks and adding a transport-layer header to each chunk to create the transport-layer
	segment. The transport layer then passes the segment to the network layer at the sending end system,
	where the segment is encapsulated within a network-layer packet (a datagram) and sent to the
	destination. It’s important to note that network routers act only on the network-layer fields of the
	datagram; that is, they do not examine the fields of the transport-layer segment encapsulated with the
	datagram. On the receiving side, the network layer extracts the transport-layer segment from the
	datagram and passes the segment up to the transport layer. The transport layer then processes the
	received segment, making the data in the segment available to the receiving application.

	4. Transport-layer protocols live in the end systems. Within an end system,
	a transport protocol moves messages from application processes to the network edge (that is, the
	network layer) and vice versa, but it doesn’t have any say about how the messages are moved within
	the network core. In fact, as illustrated in Figure 3.1, intermediate routers neither act on, nor recognize,
	any information that the transport layer may have added to the application messages.

	5. A transport protocol can use encryption to guarantee that application messages are not read
	by intruders, even when the network layer cannot guarantee the confidentiality of transport-layer
	segments.

	6. To simplify terminology, we refer to the transport-layer packet as a segment. We mention, however, that
	the Internet literature (for example, the RFCs) also refers to the transport-layer packet for TCP as a
	segment but often refers to the packet for UDP as a datagram. But this same Internet literature also
	uses the term datagram for the network-layer packet! For an introductory book on computer networking
	such as this, we believe that it is less confusing to refer to both TCP and UDP packets as segments,
	and reserve the term datagram for the network-layer packet.

	7. The most fundamental responsibility of UDP and TCP is to extend IP’s delivery service
	between two end systems to a delivery service between two processes running on the end systems.Extending host-to-host delivery to process-to-process delivery is called transport-layer multiplexing
	and demultiplexing. Process-to-process data delivery and error
	checking—are the only two services that UDP provides! In particular, like IP, UDP is an unreliable
	service—it does not guarantee that data sent by one process will arrive intact (or at all!) to the
	destination process.

	8. TCP, on the other hand, offers several additional services to applications. First and foremost, it provides
	reliable data transfer. Using flow control, sequence numbers, acknowledgments, and timers
	(techniques we’ll explore in detail in this chapter), TCP ensures that data is delivered from sending
	process to receiving process, correctly and in order. TCP thus converts IP’s unreliable service between
	end systems into a reliable data transport service between processes. TCP also provides congestion
	control. Congestion control is not so much a service provided to the invoking application as it is a
	service for the Internet as a whole, a service for the general good. Loosely speaking, TCP congestion
	control prevents any one TCP connection from swamping the links and routers between communicating
	hosts with an excessive amount of traffic. TCP strives to give each connection traversing a congested
	link an equal share of the link bandwidth. This is done by regulating the rate at which the sending sides
	of TCP connections can send traffic into the network. UDP traffic, on the other hand, is unregulated. An
	application using UDP transport can send at any rate it pleases, for as long as it pleases.

--------------------------------------------------------------------------------------------------------------
----------------------------------------------  NETWORK LAYER  -----------------------------------------------
--------------------------------------------------------------------------------------------------------------
DATA PLANE
routers
IPv4, IPv6
SDN



CONTROL PLANE
routing algorithms
intra-AS routing OSPF
routing amoung the ISPs: BGP
SDN Control Plane
ICMP: internet control message protocol
Network Management and SNMP

--------------------------------------------------------------------------------------------------------------
----------------------------------------- WIRELESS AND MOBILE NETWORKS ---------------------------------------
--------------------------------------------------------------------------------------------------------------


--------------------------------------------------------------------------------------------------------------
----------------------------------------------- NETWORK SECURITY ----------------------------------------------
--------------------------------------------------------------------------------------------------------------
Cryptography
VPN
End point authentication
SSL
Digital Signatures


|||||||||||||||||||||||||||||||||||||||||||||| END OF FILE ||||||||||||||||||||||||||||||||||||||||||||||||||||||

