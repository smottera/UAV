// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.5
// source: uav.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UavControl_BiDirComm_FullMethodName = "/protofiles.uavControl/biDirComm"
)

// UavControlClient is the client API for UavControl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UavControlClient interface {
	BiDirComm(ctx context.Context, opts ...grpc.CallOption) (UavControl_BiDirCommClient, error)
}

type uavControlClient struct {
	cc grpc.ClientConnInterface
}

func NewUavControlClient(cc grpc.ClientConnInterface) UavControlClient {
	return &uavControlClient{cc}
}

func (c *uavControlClient) BiDirComm(ctx context.Context, opts ...grpc.CallOption) (UavControl_BiDirCommClient, error) {
	stream, err := c.cc.NewStream(ctx, &UavControl_ServiceDesc.Streams[0], UavControl_BiDirComm_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &uavControlBiDirCommClient{stream}
	return x, nil
}

type UavControl_BiDirCommClient interface {
	Send(*ToDrone) error
	Recv() (*FromDrone, error)
	grpc.ClientStream
}

type uavControlBiDirCommClient struct {
	grpc.ClientStream
}

func (x *uavControlBiDirCommClient) Send(m *ToDrone) error {
	return x.ClientStream.SendMsg(m)
}

func (x *uavControlBiDirCommClient) Recv() (*FromDrone, error) {
	m := new(FromDrone)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UavControlServer is the server API for UavControl service.
// All implementations must embed UnimplementedUavControlServer
// for forward compatibility
type UavControlServer interface {
	BiDirComm(UavControl_BiDirCommServer) error
	mustEmbedUnimplementedUavControlServer()
}

// UnimplementedUavControlServer must be embedded to have forward compatible implementations.
type UnimplementedUavControlServer struct {
}

func (UnimplementedUavControlServer) BiDirComm(UavControl_BiDirCommServer) error {
	return status.Errorf(codes.Unimplemented, "method BiDirComm not implemented")
}
func (UnimplementedUavControlServer) mustEmbedUnimplementedUavControlServer() {}

// UnsafeUavControlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UavControlServer will
// result in compilation errors.
type UnsafeUavControlServer interface {
	mustEmbedUnimplementedUavControlServer()
}

func RegisterUavControlServer(s grpc.ServiceRegistrar, srv UavControlServer) {
	s.RegisterService(&UavControl_ServiceDesc, srv)
}

func _UavControl_BiDirComm_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UavControlServer).BiDirComm(&uavControlBiDirCommServer{stream})
}

type UavControl_BiDirCommServer interface {
	Send(*FromDrone) error
	Recv() (*ToDrone, error)
	grpc.ServerStream
}

type uavControlBiDirCommServer struct {
	grpc.ServerStream
}

func (x *uavControlBiDirCommServer) Send(m *FromDrone) error {
	return x.ServerStream.SendMsg(m)
}

func (x *uavControlBiDirCommServer) Recv() (*ToDrone, error) {
	m := new(ToDrone)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UavControl_ServiceDesc is the grpc.ServiceDesc for UavControl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UavControl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protofiles.uavControl",
	HandlerType: (*UavControlServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "biDirComm",
			Handler:       _UavControl_BiDirComm_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "uav.proto",
}
